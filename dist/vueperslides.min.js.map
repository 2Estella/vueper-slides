{"version":3,"file":"vueperslides.min.js","sources":["../src/components/VueperSlide.vue","../src/components/VueperSlides.vue","../src/index.js"],"sourcesContent":["<template lang=\"pug\">\ndiv(:class=\"{ 'vueperslides__slide': true, 'vueperslides__slide--active': $parent.slides.activeUid === _uid }\" :style=\"styles\" :aria-hidden=\"$parent.slides.activeUid === _uid ? 'false' : 'true'\")\n  div.vueperslides__slide-content(v-show=\"!$parent.conf.slideContentOutside && (title || hasTitleSlotData || content || hasContentSlotData)\")\n    div.slide-title(v-show=\"title || hasTitleSlotData\")\n      div(v-show=\"!$parent.conf.slideContentOutside && !title\")\n        slot(name=\"slideTitle\")\n      div(v-if=\"title\" v-html=\"title\")\n    div.slide-content(v-if=\"content || hasContentSlotData\")\n      div(v-show=\"!$parent.conf.slideContentOutside && !content\")\n        slot(name=\"slideContent\")\n      div(v-if=\"content\" v-html=\"content\")\n</template>\n\n<script>\nexport default {\n  props: {\n    clone: {\n      type: Number,\n      default: null\n    },\n    image: {\n      type: String,\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    content: {\n      type: String,\n      default: ''\n    }\n  },\n  created () {\n    // vueperslide component has this useful attributes:\n    // _uid, image, title, titleSlot, content, contentSlot, clone.\n    this.$parent.addSlide(this)\n  },\n  // When removing a slide programmatically, remove it from the config so vueperslides\n  // component is aware of the change.\n  destroyed () {\n    if (this.clone === null) this.$parent.removeSlide(this._uid)\n  },\n  computed: {\n    styles () {\n      return { ...(this.image && { backgroundImage: `url(${this.image})` }) }\n    },\n  \thasTitleSlotData () {\n      let { slideTitle } = this.$slots\n      return slideTitle !== undefined\n    },\n  \thasContentSlotData () {\n      let { slideContent } = this.$slots\n      return slideContent !== undefined\n    }\n  }\n}\n</script>\n","<template lang=\"pug\">\ndiv.vueperslides(:class=\"{ 'vueperslides--ready': isReady, 'vueperslides--fade': conf.fade, 'vueperslides--parallax': conf.parallax, 'vueperslides--touchable': touch.enabled && !disable, 'vueperslides--animated': transition.animated }\" ref=\"vueperslides\" aria-label=\"Slideshow\")\n  div.vueperslides__slide-content.vueperslides__slide-content--outside-top(:class=\"conf.slideContentOutsideClass\" v-if=\"conf.slideContentOutside === 'top'\")\n    div.slide-title(v-if=\"slides.count\" v-html=\"getCurrentSlideData('title')\")\n    div.slide-content(v-if=\"slides.count\" v-html=\"getCurrentSlideData('content')\")\n\n  div.vueperslides__inner\n    div.vueperslides__parallax-wrapper(:style=\"'padding-bottom:' + (conf.slideRatio * 100) + '%'\" aria-live=\"polite\")\n      div.vueperslides__track-wrapper(:style=\"trackWrapperStyles\")\n        div.vueperslides__track(:class=\"{ 'vueperslides__track--dragging': touch.dragging, 'vueperslides__track--mousedown': mouseDown }\" ref=\"track\" :style=\"trackStyles\")\n          vueper-slide.vueperslides__slide--clone(v-if=\"slides.count && clones[0]\" :clone=\"0\" :title=\"clones[0].title\" :content=\"clones[0].content\" :image=\"clones[0].image\" :style=\"clones[0].style\" aria-hidden=\"true\")\n            div(v-if=\"clones[0].titleSlot\" slot=\"slideTitle\" v-html=\"clones[0].titleSlot\")\n            div(v-if=\"clones[0].contentSlot\" slot=\"slideContent\" v-html=\"clones[0].contentSlot\")\n          slot(:currentSlide=\"slides.current\")\n          vueper-slide.vueperslides__slide--clone(v-if=\"slides.count && clones[1]\" :clone=\"1\" :title=\"clones[1].title\" :content=\"clones[1].content\" :image=\"clones[1].image\" :style=\"clones[1].style\" aria-hidden=\"true\")\n            div(v-if=\"clones[1].titleSlot\" slot=\"slideTitle\" v-html=\"clones[1].titleSlot\")\n            div(v-if=\"clones[1].contentSlot\" slot=\"slideContent\" v-html=\"clones[1].contentSlot\")\n\n    div.vueperslides__paused(v-if=\"$slots.pausedIcon\")\n      slot(name=\"pausedIcon\")\n    div.vueperslides__arrows(:class=\"{ 'vueperslides__arrows--outside': conf.arrowsOutside }\" v-if=\"conf.arrows && slides.count > 1 && !disable\")\n      button.vueperslides__arrow.vueperslides__arrow--prev(@click=\"onArrowClick(false)\" v-show=\"!arrowPrevDisabled\" aria-label=\"Previous\")\n        slot(name=\"arrowLeft\")\n          svg(viewBox=\"0 0 24 24\")\n            path(d=\"M16.2,21c0.3,0,0.5-0.1,0.7-0.3c0.4-0.4,0.4-1,0-1.4L9.6,12L17,4.7c0.4-0.4,0.4-1,0-1.4c-0.4-0.4-1-0.4-1.4,0L6.8,12l8.8,8.7C15.7,20.9,16,21,16.2,21z\")\n      button.vueperslides__arrow.vueperslides__arrow--next(@click=\"onArrowClick()\" v-show=\"!arrowNextDisabled\" aria-label=\"Next\")\n        slot(name=\"arrowRight\")\n          svg(viewBox=\"0 0 24 24\")\n            path(d=\"M7.8,21c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4l7.4-7.3L7,4.7c-0.4-0.4-0.4-1,0-1.4s1-0.4,1.4,0l8.8,8.7l-8.8,8.7C8.3,20.9,8,21,7.8,21z\")\n    div.vueperslides__bullets(v-if=\"conf.bullets && slides.count > 1 && !disable && !conf.bulletsOutside\" role=\"tablist\" aria-label=\"Slideshow navigation\")\n      button.vueperslides__bullet(:class=\"{ 'vueperslides__bullet--active': slides.current === i }\" v-for=\"(item, i) in slides.list\" :key=\"i\" @click=\"goToSlide(i)\" @keyup.left=\"onArrowClick(false)\" @keyup.right=\"onArrowClick()\" ref=\"bullet\")\n        span {{ i + 1 }}\n\n  div.vueperslides__bullets.vueperslides__bullets--outside(v-if=\"conf.bullets && slides.count > 1 && !disable && conf.bulletsOutside\")\n    button.vueperslides__bullet(:class=\"{ 'vueperslides__bullet--active': slides.current === i }\" v-for=\"(item, i) in slides.list\" :key=\"i\" @click=\"goToSlide(i)\" @keyup.left=\"onArrowClick(false)\" @keyup.right=\"onArrowClick()\" ref=\"bullet\")\n      span {{ i + 1 }}\n\n  div.vueperslides__slide-content.vueperslides__slide-content--outside-bottom(:class=\"conf.slideContentOutsideClass\" v-if=\"conf.slideContentOutside === 'bottom'\")\n    div.slide-title(v-if=\"slides.count\" v-html=\"getCurrentSlideData('title')\")\n    div.slide-content(v-if=\"slides.count\" v-html=\"getCurrentSlideData('content')\")\n</template>\n\n<script>\nimport VueperSlide from './VueperSlide.vue'\nimport './styles.scss'\n\nexport default {\n  name: 'vueper-slides',\n  components: { VueperSlide },\n  props: {\n    initSlide: {\n      type: Number,\n      default: 1\n    },\n    slideRatio: {\n      type: Number,\n      default: 1/3\n    },\n    arrows: {\n      type: Boolean,\n      default: true\n    },\n    arrowsOutside: {\n      type: Boolean,\n      default: false\n    },\n    // Ability to disable arrows on slideshow edges. Only if not infinite mode.\n    disableArrowsOnEdges: {\n      type: [Boolean, String],\n      default: false\n    },\n    bullets: {\n      type: Boolean,\n      default: true\n    },\n    bulletsOutside: {\n      type: Boolean,\n      default: false\n    },\n    fade: {\n      type: Boolean,\n      default: false\n    },\n    slideContentOutside: {\n      type: [Boolean, String],\n      default: false\n    },\n    slideContentOutsideClass: {\n      type: String,\n      default: ''\n    },\n    autoplay: {\n      type: Boolean,\n      default: false\n    },\n    speed: {\n      type: [Number, String],\n      default: 4000\n    },\n    transitionSpeed: {\n      type: [Number, String],\n      default: 600\n    },\n    pauseOnHover: {\n      type: Boolean,\n      default: true\n    },\n    infinite: {\n      type: Boolean,\n      default: true\n    },\n    refreshClonesOnDrag: {\n      type: Boolean,\n      default: false\n    },\n    parallax: {\n      type: [Boolean, Number],\n      default: false\n    },\n    touchable: {\n      type: Boolean,\n      default: true\n    },\n    // By default when touch is enabled you have to drag from a slide side and pass 50% of slideshow width to change\n    // slide. This setting changes this behavior to a horizontal pixel amount from anywhere on slideshow.\n    draggingDistance: {\n      type: Number,\n      default: null\n    },\n    disable: {\n      type: Boolean,\n      default: false\n    },\n    breakpoints: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data: () => ({\n    isReady: false,\n    container: null,\n    slides: { list: [], count: 0, activeUid: null, current: 0, clones: [] },\n    clones: [],\n    mouseDown: false,\n    mouseOver: false,\n    touch: { enabled: true, dragging: false, dragStartX: 0, dragAmount: 0, goNext: true },\n    transition: { currentTranslation: 0, speed: 0, animated: false },\n    timer: null,\n    arrowPrevDisabled: false,\n    arrowNextDisabled: false,\n    breakpointsData: { list: [], current: null },\n    parallaxData: { translation: 0, slideshowOffsetTop: null, isVisible: false }\n  }),\n  mounted () {\n    this.init()\n  },\n  methods: {\n    init () {\n      this.emit('before-init', false)\n      this.container = this.$refs.vueperslides\n      this.touch.enabled = this.conf.touchable\n      this.transition.speed = this.conf.transitionSpeed\n\n      if (Object.keys(this.breakpoints).length) {\n        this.setBreakpointsList()\n        this.setBreakpointConfig(this.getCurrentBreakpoint())\n      }\n\n      if (this.conf.infinite && !this.conf.fade) {\n        this.cloneSlides()\n        this.$nextTick(() => this.cloneSlides())\n      }\n\n      this.goToSlide(this.conf.initSlide - 1)\n      this.bindEvents()\n\n      this.isReady = true\n      this.emit('ready')\n    },\n\n    // Emit a named event outside the component with 2 possible parameters:\n    // current slide info & next slide info.\n    emit(name, includeCurrentSlide = true, includeNextSlide = false) {\n      // Emit param 0 = event name string.\n      let args = [name]\n\n      if (includeCurrentSlide || typeof includeNextSlide === 'number') {\n        // Emit param 1 is object like { currentSlide: ...[, nextSlide: ...] }.\n        args[1] = {}\n\n        if (includeCurrentSlide && this.slides.activeUid) {\n          args[1].currentSlide = this.getSlideData(this.slides.current)\n        }\n\n        if (typeof includeNextSlide === 'number') {\n          let { nextSlide: nextSlideIndex } = this.getSlideInRange(includeNextSlide)\n          args[1].nextSlide = this.getSlideData(nextSlideIndex)\n        }\n      }\n\n      this.$emit(name, ...args)\n    },\n\n    getSlideData (index, withStyle = false) {\n      let slide = this.slides.list[index]\n      let { slideTitle = [{}], slideContent = [{}] } = slide.$slots\n      let { elm: elmT = {} } = slideTitle[0]\n      let { elm: elmC = {} } = slideContent[0]\n\n      let data =  {\n        index: index,\n        title: slide.title,\n        titleSlot: elmT && elmT.innerHTML || null,\n        content: slide.content,\n        contentSlot: elmC && elmC.innerHTML || null,\n        image: slide.image\n      }\n\n      if (withStyle) {\n        let { attributes: { style: { value = '' } = {} } = {} } = slide.$el\n        data.style = value\n      }\n\n      return data\n    },\n\n    getCurrentSlideData (what) {\n      let { titleSlot, title, contentSlot, content } = this.getSlideData(this.slides.current)\n      // If both slot and attribute are provided use the attribute source.\n      return what === 'title' ? title || titleSlot : (content || contentSlot)\n    },\n\n    setBreakpointsList () {\n      this.breakpointsData.list = [99999, ...Object.keys(this.breakpoints)].sort((a, b) => parseInt(a) < parseInt(b))\n    },\n\n    getCurrentBreakpoint () {\n      let windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n      let breakpoints = [windowWidth, ...this.breakpointsData.list].sort((a, b) => parseInt(a) < parseInt(b))\n\n      return this.breakpointsData.list[breakpoints.indexOf(windowWidth) - 1]\n    },\n\n    hasBreakpointChanged (breakpoint) {\n      return this.breakpointsData.current !== breakpoint\n    },\n\n    setBreakpointConfig (breakpoint) {\n      this.breakpointsData.current = breakpoint\n      // this.conf gets updated by itself when this.breakpointsData.current changes.\n    },\n\n    cloneSlides () {\n      this.clones[0] = this.getSlideData(this.slides.count - 1, true)\n      this.clones[1] = this.getSlideData(0, true)\n    },\n\n    bindEvents () {\n      const hasTouch = 'ontouchstart' in window\n\n      // Touch enabled slideshow.\n      if (this.touch.enabled) {\n        this.$refs.track.addEventListener(hasTouch ? 'touchstart' : 'mousedown', this.onMouseDown)\n        document.addEventListener(hasTouch ? 'touchmove' : 'mousemove', this.onMouseMove)\n        document.addEventListener(hasTouch ? 'touchend' : 'mouseup', this.onMouseUp)\n      }\n\n      // Pause autoplay on mouseover.\n      if (this.conf.pauseOnHover && !hasTouch && this.conf.autoplay) {\n        this.container.addEventListener('mouseover', this.onMouseIn)\n        this.container.addEventListener('mouseout', this.onMouseOut)\n      }\n\n      // Breakpoints or parallax need a resize event.\n      if (this.breakpointsData.list.length || this.conf.parallax) {\n        window.addEventListener('resize', this.onResize)\n      }\n\n      // Parallax slideshow.\n      if (this.conf.parallax) {\n        document.addEventListener('scroll', this.onScroll)\n      }\n    },\n\n    // Recursively sum all the offsetTop values from current element up the tree until body.\n    // By doing so a padding or margin on a parent won't cause a wrong calculation.\n    getSlideshowOffsetTop (force = false) {\n      if (this.parallaxData.slideshowOffsetTop === null || force) {\n        let el = this.container\n        let top = el.offsetTop\n\n        while (el = el.offsetParent) {\n          top += el.offsetTop\n        }\n\n        this.parallaxData.slideshowOffsetTop = top\n      }\n\n      return this.parallaxData.slideshowOffsetTop\n    },\n\n    onScroll (e) {\n      let doc = document.documentElement\n      let scrollTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0)\n      let windowHeight = window.innerHeight || doc.clientHeight || document.body.clientHeight\n      let slideshowHeight = this.container.clientHeight\n      let slideshowTopOffset = this.getSlideshowOffsetTop()\n\n      // The distance between the bottom line of the current vueperslides slideshow and top of window.\n      // Negative value means the slideshow is totally above the current window box.\n      let vsBottom2WinTop = slideshowTopOffset + slideshowHeight - scrollTop\n      // The distance between the top line of the current vueperslides slideshow and bottom of window.\n      // Negative value means the slideshow is totally bellow the current window box.\n      let vsTop2winBottom = windowHeight + scrollTop - slideshowTopOffset\n\n      this.parallaxData.isVisible = vsBottom2WinTop > 0 && vsTop2winBottom > 0\n\n      // Only apply translation when slideshow is visible.\n      if (this.parallaxData.isVisible) {\n        let heightToCoverWithTranslation = windowHeight + slideshowHeight\n        let percentage = vsBottom2WinTop * 100 / heightToCoverWithTranslation\n        let translatePercentage = this.conf.parallax === -1 ? 100 - percentage : percentage\n        this.parallaxData.translation = - translatePercentage / 2\n      }\n    },\n\n    onResize () {\n      if (this.breakpointsData.list.length) {\n        let breakpoint = this.getCurrentBreakpoint()\n        if (this.hasBreakpointChanged(breakpoint)) {\n          this.setBreakpointConfig(breakpoint)\n        }\n      }\n\n      if (this.conf.parallax) {\n        // Only refresh parallaxData.slideshowOffsetTop value on resize for better performance.\n        this.getSlideshowOffsetTop(true)\n      }\n    },\n\n    onMouseIn () {\n      this.mouseOver = true\n\n      if (this.conf.pauseOnHover && this.conf.autoplay) {\n        this.clearTimer()\n      }\n    },\n\n    onMouseOut () {\n      this.mouseOver = false\n\n      if (this.conf.pauseOnHover && this.conf.autoplay) {\n        this.setTimer()\n      }\n    },\n\n    onMouseDown (e) {\n      if (!this.touch.enabled || this.disable) return\n      if (!e.touches) e.preventDefault()\n\n      if (this.conf.infinite && !this.conf.fade) this.cloneSlides()\n      // this.disableScroll()\n\n      this.mouseDown = true\n\n      if (this.draggingDistance) {\n        // Store drag start in var for distance calculation in onMouseUp().\n        this.touch.dragStartX = 'ontouchstart' in window ? e.touches[0].clientX : e.clientX\n      } else {\n        let dragPercentage = this.getDragPercentage(e)\n\n        // Set a flag for use while dragging in `onMouseMove` to know if drag was toward left or right.\n        this.touch.goNext = dragPercentage >= 0.5\n\n        this.transition.currentTranslation = - 100 * (this.slides.current + (this.touch.goNext ? 1 : 0) + (this.clones.length ? 1 : 0) - dragPercentage)\n      }\n    },\n\n    onMouseMove (e) {\n      if (this.mouseDown || this.touch.dragging) {\n        this.mouseDown = false\n        this.touch.dragging = true\n\n        // The clones are created with a copy of content.\n        // Set refreshClonesOnDrag to true if you want to keep updating clones before you see them.\n        if (this.conf.refreshClonesOnDrag && this.conf.infinite && !this.conf.fade) {\n          this.cloneSlides()\n        }\n\n        if (this.draggingDistance) {\n          this.touch.dragAmount = this.getDragAmount(e)\n          let dragAmountPercentage = this.touch.dragAmount / this.container.clientWidth\n\n          this.transition.currentTranslation = - 100 * (this.slides.current + (this.clones.length ? 1 : 0) - dragAmountPercentage)\n        } else {\n          let dragPercentage = this.getDragPercentage(e)\n          this.transition.currentTranslation = - 100 * (this.slides.current + (this.touch.goNext ? 1 : 0) + (this.clones.length ? 1 : 0) - dragPercentage)\n        }\n      }\n    },\n\n    onMouseUp (e) {\n      if (this.mouseDown || this.touch.dragging) {\n        this.mouseDown = false\n        this.touch.dragging = false\n\n        let slideOnDragEnd\n        if (this.draggingDistance) {\n          let dragAmount = this.touch.dragAmount\n          let dragAmountPercentage = dragAmount / this.container.clientWidth\n\n          slideOnDragEnd = this.slides.current\n          if (Math.abs(dragAmount) >= this.draggingDistance) {\n            slideOnDragEnd += dragAmount > 0 ? -1 : 1\n          }\n        } else {\n          // When the drag is realeased, calculate if the drag ends before or after the 50%-slideshow-width threshold.\n          // Then finish the sliding toward that slide.\n          slideOnDragEnd = - (Math.round(this.transition.currentTranslation / 100) + (this.clones.length ? 1 : 0))\n        }\n\n        let { nextSlide } = this.getSlideInRange(slideOnDragEnd)\n\n        // If drag is not allowed (`arrowNextDisabled` = true) and dragging beyond last slide,\n        // cancel sliding and snap back to last slide.\n        if (this.arrowNextDisabled && this.conf.autoplay && nextSlide === 0) {\n          nextSlide = this.slides.count - 1\n        }\n\n        // Only call `goToSlide` if the drag ends on a slide that is different than the currentSlide.\n        if (nextSlide !== this.slides.current) {\n          this.goToSlide(slideOnDragEnd)\n        } else {\n          // Apply transition to snap back to current slide.\n          this.transition.currentTranslation = - (this.slides.current + (this.clones.length ? 1 : 0)) * 100\n        }\n\n        this.touch.dragStartX = null\n        this.touch.dragAmount = null\n        this.enableScroll()\n      }\n    },\n\n    getDragPercentage (e) {\n      let dragStartX = 'ontouchstart' in window ? e.touches[0].clientX : e.clientX\n\n      // For full window width slideshow only.\n      // let windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\n      // return dragStartX / windowWidth\n\n      return (dragStartX - this.container.offsetLeft) / this.container.clientWidth\n    },\n\n    /**\n     * Return the x distance in pixel between drag start and current drag position.\n     */\n    getDragAmount (e) {\n      return ('ontouchstart' in window ? e.touches[0].clientX : e.clientX) - this.touch.dragStartX\n    },\n\n    disableScroll () {\n      document.ontouchmove = function(e) {\n        e.preventDefault()\n      }\n    },\n\n    enableScroll () {\n      document.ontouchmove = function() {\n        return true\n      }\n    },\n\n    clearTimer () {\n      clearTimeout(this.timer)\n      this.timer = 0\n    },\n\n    setTimer () {\n      this.timer = setTimeout(() => {\n        this.goToSlide(this.slides.current + 1, { autoPlaying: true })\n      }, this.conf.speed)\n    },\n\n    onArrowClick (next = true) {\n      this.goToSlide(this.slides.current + (next ? 1 : -1))\n    },\n\n    getSlideInRange (index) {\n      let clone = null\n\n      // If infinite enabled, going out of range takes the first slide from the other end.\n      if (this.clones.length) {\n        if (index < 0) {\n          index = this.slides.count - 1\n          clone = 0\n        }\n        else if (index > this.slides.count - 1) {\n          index = 0\n          clone = 1\n        }\n      }\n\n      // If not infinite, can't go lower than 0 or beyond `slides.count` with `disableArrowsOnEdges`.\n      // If `disableArrowsOnEdges` is enabled going out of range will take first slide from the other end\n      // of the slideshow.\n      else {\n        if (index < 0) index = this.conf.disableArrowsOnEdges ? 0 : this.slides.count - 1\n        else if (index > this.slides.count - 1) {\n          // If autoplay is on but disableArrowsOnEdges is enabled, going beyond the last one will also bring\n          // the first one in.\n          index = this.conf.disableArrowsOnEdges ? (this.conf.autoplay ? 0 : this.slides.count - 1) : 0\n        }\n      }\n\n      return { nextSlide: index, clone: clone }\n    },\n\n    goToSlide (index, options = {}) {\n      if (!this.slides.count || this.disable) return\n\n      if (this.conf.autoplay) this.clearTimer()\n\n      // animation = slide transition is animated.\n      // autoPlaying = go to the next slide by autoplay - no user intervention.\n      // jumping = after reaching a clone, the callback jumps back to original slide with no animation.\n      let { animation = true, autoPlaying = false, jumping = false } = options\n\n      // Get the next slide index and whether it's a clone.\n      let { nextSlide, clone: nextSlideIsClone } = this.getSlideInRange(index)\n\n      // Emit event. First use of `goToSlide` is while init, so should not propagate an event.\n      if (this.isReady && !jumping) {\n        this.emit('before-slide', true, nextSlide)\n\n        if (nextSlideIsClone !== null) this.cloneSlides()\n      }\n\n      // Disable arrows if `disableArrowsOnEdges` is on and there is no slide to go to on that end.\n      if (this.conf.arrows && this.conf.disableArrowsOnEdges) {\n        this.arrowPrevDisabled = nextSlide === 0\n        this.arrowNextDisabled = nextSlide === this.slides.count - 1\n      }\n\n      // Infinite sliding with cloned slides:\n      // When reaching last slide and going next the cloned slide of the first slide\n      // shows up, when the animation ends the real change to the first slide is done\n      // immediately with no animation.\n      // Same principle when going beyond first slide.\n      if (nextSlideIsClone !== null) {// Gives clone id (0 or 1 or null).\n        setTimeout(() => {\n          // inside the callback, also check if it is not too late to apply next slide\n          // (user may have slid fast multiple times) if so cancel callback.\n          let passedCloneBackward = index === -1 && this.slides.current !== this.slides.count - 1\n          let passedCloneForward = index === this.slides.count && this.slides.current !== 0\n          let tooLateToSetTimeout = passedCloneBackward || passedCloneForward\n\n          if (!tooLateToSetTimeout) {\n            this.transition.speed = 0\n            this.goToSlide(nextSlideIsClone ? 0 : this.slides.count - 1, { animation: false, jumping: true })\n            setTimeout(() => this.transition.speed = this.conf.transitionSpeed, 10)\n          }\n        }, this.transition.speed - 50)\n      }\n\n      this.slides.current = nextSlide\n\n      // Only apply sliding transition when the slideshow animation type is `slide`.\n      if (!this.conf.fade) {\n        if (nextSlideIsClone !== null) {\n          this.transition.currentTranslation = - 100 * (nextSlideIsClone ? this.slides.count + 1 : 0)\n        }\n        else this.transition.currentTranslation = - 100 * (this.slides.current + (this.clones.length ? 1 : 0))\n      }\n\n      this.slides.activeUid = this.slides.list[this.slides.current]._uid\n\n      if (this.conf.autoplay && !this.mouseOver) {\n        this.setTimer()\n      }\n\n      if (this.slides.count) {\n        if (this.$slots.default[this.slides.current]) {\n          // First use of goToSlide is while init, so should not propagate an event.\n          if (this.isReady && !jumping) this.emit('slide')\n        }\n\n        if (this.isReady && !autoPlaying && !jumping && this.$refs.bullet[this.slides.current]) {\n          this.$refs.bullet[this.slides.current].focus()\n        }\n      }\n    },\n\n    addSlide (newSlide) {\n      const needReclone = this.conf.infinite && !this.conf.fade && this.isReady && newSlide.clone === null\n\n      if (newSlide.clone !== null) {\n        this.clones[newSlide.clone] = newSlide\n      }\n\n      else {\n        // Add the slide in the slides array & update slides.count.\n        this.slides.list.push(newSlide)\n        this.slides.count = this.slides.list.length\n      }\n\n      if (this.slides.count > 1 && this.touchable) {\n        this.touch.enabled = true\n      }\n\n      // cloneSlides() is called at the end of init so calling it before would be redundant.\n      if (needReclone) {\n        this.$nextTick(() => this.cloneSlides())\n      }\n    },\n\n    removeSlide (uid) {\n      let needReclone = false\n\n      this.slides.list.some((slide, i) => {\n        if (slide._uid === uid) {\n          // Remove the slide.\n          this.slides.list.splice(i, 1)\n          this.slides.count = this.slides.list.length\n\n          // If the slide to remove is the current slide, slide to the previous slide.\n          if (uid === this.slides.activeUid) {\n            this.slides.activeUid = null\n            this.goToSlide(i - 1, { autoPlaying: true })\n          }\n\n          if (this.slides.count <= 1) {\n            this.touch.enabled = false\n          }\n\n          if (this.clones.length && this.isReady && !slide.clone) needReclone = true\n\n          return true // Break the `Array.some` loop.\n        }\n      })\n\n      if (this.slides.count && needReclone) {\n        this.cloneSlides()\n      }\n    }\n  },\n\n  computed: {\n    // this.conf needs to be reactive so user can change a Vueper Slides option and everything gets updated.\n    conf () {\n      // Read config from the props then check if breakpoints are defined. If so override the config with\n      // the breakpoint ones.\n      return {\n        ...this.$props,\n        ...(this.$props.breakpoints && this.$props.breakpoints[this.breakpointsData.current] || {})\n      }\n    },\n    trackStyles () {\n      let styles = {}\n\n      styles.transitionDuration = this.transition.speed + 'ms'\n\n      if (!this.conf.fade) {\n        styles.transform = 'translateX(' + this.transition.currentTranslation + '%)'\n      }\n\n      return styles\n    },\n    trackWrapperStyles () {\n      let styles = {}\n\n      if (this.conf.parallax) {\n        styles.transform = 'translateY(' + this.parallaxData.translation + '%)'\n\n        // Increase browser optimizations by allocating more machine resource.\n        // ! \\\\ To be used wisely so deactivate when not needed.\n        styles.willChange = this.parallaxData.isVisible ? 'transform' : 'auto'\n      }\n\n      return styles\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n// Vueperslides REQUIRED styles.\n// The nice-to-have not required styles are placed in an external\n// css file so the end user can easily override them.\n.vueperslides {\n  position: relative;\n\n  &__inner {\n    position: relative;\n    user-select: none;\n  }\n\n  &__parallax-wrapper {\n    position: relative;\n    // padding-bottom: 33.33%;\n    overflow: hidden;\n  }\n\n  &__track-wrapper {\n    position: absolute;\n    top: 0;\n    height: 100%;\n    left: 0;\n    right: 0;\n    overflow: hidden;\n    z-index: 1;\n  }\n\n  &--parallax &__track-wrapper {\n    height: 200%;\n    transform: translateY(0);\n  }\n\n  &--fade &__track {\n    white-space: normal;\n    transition: none;\n  }\n\n  &--touchable &__track {\n    cursor: ew-resize;\n    cursor: -webkit-grab;\n    cursor: grab;\n\n    &--mousedown, &--dragging {\n      cursor: -webkit-grabbing;\n      cursor: grabbing;\n    }\n  }\n\n  &__track {\n    white-space: nowrap;\n    transition: 0.5s ease-in-out transform;\n    height: 100%;\n\n    &--mousedown {\n      transition: 0.2s ease-in-out transform !important;\n    }\n\n    &--dragging {\n      transition: none;\n    }\n\n    &--no-animation {\n      transition-duration: 0s;\n    }\n  }\n\n  &__slide {\n    white-space: normal;\n    background-size: cover;\n    display: inline-block;\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n\n  &__slide &__slide-content {\n    position: absolute;\n  }\n\n  &--fade &__slide {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    opacity: 0;\n    transition: .8s ease-in-out opacity;\n\n    &--active {\n      z-index: 1;\n      opacity: 1;\n    }\n  }\n\n  &__arrow {\n    position: absolute;\n    fill: currentColor;\n    width: 1em;\n    text-align: center;\n    transform: translateY(-50%);\n    transition: 0.3s ease-in-out;\n    cursor: pointer;\n    user-select: none;\n    outline: none;\n    z-index: 2;\n  }\n\n  &__paused {\n    position: absolute;\n    transition: 0.3s ease-in-out;\n  }\n\n  &__bullets {\n    display: flex;\n    justify-content: center;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    &--outside {\n      position: relative;\n    }\n  }\n\n  &__bullet {\n    cursor: pointer;\n    user-select: none;\n    outline: none;\n    z-index: 2;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    &::-moz-focus-inner {\n      border: 0;\n    }\n  }\n}\n</style>","import VueperSlides from './components/VueperSlides.vue'\nimport VueperSlide from './components/VueperSlide.vue'\n\n// Expose component to global scope.\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.component('vueper-slides', VueperSlides)\n  window.Vue.component('vueper-slide', VueperSlide)\n}\n\nexport { VueperSlides, VueperSlide }\n"],"names":["render","Number","String","$parent","addSlide","this","clone","removeSlide","_uid","image","backgroundImage","undefined","$slots","slideTitle","slideContent","VueperSlide","Boolean","Object","list","count","activeUid","current","clones","enabled","dragging","dragStartX","dragAmount","goNext","currentTranslation","speed","animated","translation","slideshowOffsetTop","isVisible","init","emit","container","$refs","vueperslides","touch","conf","touchable","transition","transitionSpeed","keys","breakpoints","length","setBreakpointsList","setBreakpointConfig","getCurrentBreakpoint","infinite","fade","cloneSlides","$nextTick","_this","goToSlide","initSlide","bindEvents","isReady","name","includeCurrentSlide","includeNextSlide","args","slides","currentSlide","getSlideData","nextSlideIndex","getSlideInRange","nextSlide","$emit","index","withStyle","slide","elm","elmT","elmC","data","title","innerHTML","content","$el","attributes","style","value","what","titleSlot","contentSlot","breakpointsData","sort","a","b","parseInt","windowWidth","window","innerWidth","document","documentElement","clientWidth","body","indexOf","breakpoint","hasTouch","track","addEventListener","onMouseDown","onMouseMove","onMouseUp","pauseOnHover","autoplay","onMouseIn","onMouseOut","parallax","onResize","onScroll","force","parallaxData","el","top","offsetTop","offsetParent","e","doc","scrollTop","pageYOffset","clientTop","windowHeight","innerHeight","clientHeight","slideshowHeight","slideshowTopOffset","getSlideshowOffsetTop","vsBottom2WinTop","vsTop2winBottom","percentage","translatePercentage","hasBreakpointChanged","mouseOver","clearTimer","setTimer","disable","touches","preventDefault","mouseDown","draggingDistance","clientX","dragPercentage","getDragPercentage","refreshClonesOnDrag","getDragAmount","dragAmountPercentage","slideOnDragEnd","Math","abs","round","arrowNextDisabled","enableScroll","offsetLeft","ontouchmove","timer","setTimeout","_this2","autoPlaying","next","disableArrowsOnEdges","options","animation","jumping","nextSlideIsClone","arrows","arrowPrevDisabled","passedCloneBackward","_this3","passedCloneForward","default","bullet","focus","newSlide","needReclone","push","_this4","uid","some","i","splice","_this5","$props","styles","transitionDuration","transform","willChange","Vue","component","VueperSlides"],"mappings":"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"}