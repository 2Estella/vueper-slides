div.documentation
  v-layout.max-widthed(row wrap align-center-center justify-center)
    v-layout.flex.xs12.md9(column align-center-center)
      div.mb-3.title Features
      div.features
        v-icon.pr-2(color="secondary") check
        | Vueper Slides is #[strong fully responsive] and scales with its container.#[br]
        v-icon.pr-2(color="secondary") check
        | #[strong Touch ready] & mouse dragging for desktop.#[br]
        v-icon.pr-2(color="secondary") check
        | Uses #[strong CSS for animations] & comes with a minimum of styles (using the #[i BEM] convention). Fully customizable.#[br]
        v-icon.pr-2(color="secondary") check
        | #[strong Infinite looping], customizable arrows or disable arrow on a slideshow end, autoplay.#[br]
        v-icon.pr-2(color="secondary") check
        | Customizable bullets with or without numeric index.#[br]
        v-icon.pr-2(color="secondary") check
        | Navigate with #[strong keyboard arrows].#[br]
        v-icon.pr-2(color="secondary") check
        | Separate settings per #[strong breakpoint] - coming soon!#[br]
        v-icon.pr-2(color="secondary") check
        | Slide content supports #[strong title & description, inside OR outside] the current slide.#[br]
        v-icon.pr-2(color="secondary") check
        | #[strong Add or remove slides] on the fly, #[strong disable or enable the slideshow].#[br]
        v-icon.pr-2(color="secondary") check
        | #[strong Events] for callbacks, etc...
      div.mb-3.title Github project
      div.github
        a(href="https://github.com/antoniandre/vueper-slides" target="_blank") https://github.com/antoniandre/vueper-slides
    v-card.md3.coming-soon(align-center-center)
      v-card-title
        div To do...
      v-card-text
        v-layout(row)
          v-layout(column)
            v-chip(color="light-green lighten-1" text-color="white" small)
              v-icon check_circle
              | Minify VueperSlides
            v-chip(color="light-green lighten-1" text-color="white" small)
              v-icon check_circle
              | Emit events with params
            v-chip(color="light-green lighten-1" text-color="white" small)
              v-icon check_circle
              | Slide with keyboard arrows
            v-chip(color="light-green lighten-1" text-color="white" small)
              v-icon check_circle
              | Add / remove slides
            v-chip(color="light-green lighten-1" text-color="white" small)
              v-icon check_circle
              | Disable / enable slideshow
            v-chip(color="light-green lighten-1" text-color="white" small)
              v-icon check_circle
              | Center mode
            v-chip(color="light-green lighten-1" text-color="white" small)
              v-icon check_circle
              | Release on NPM
            v-chip(color="amber lighten-2" text-color="white" small)
              v-icon access_time
              | Settings per breakpoint
            v-chip(color="deep-orange lighten-1" text-color="white" small)
              v-icon remove_circle
              | Dragging distance
            v-chip(color="deep-orange lighten-1" text-color="white" small)
              v-icon remove_circle
              | Slides to scroll at once
            v-chip(color="deep-orange lighten-1" text-color="white" small)
              v-icon remove_circle
              | Parallax
            v-chip(color="deep-orange lighten-1" text-color="white" small)
              v-icon remove_circle
              | Lazy loading
            v-chip(color="deep-orange lighten-1" text-color="white" small)
              v-icon remove_circle
              | Nav for

  h2
    a(href="#installation") Installation
    a(name="installation")
  p You have two options: #[em NPM] #[strong or] #[span.code &lt;script&gt;] tag.
  h3 Via NPM
  precode(language="shell" label="Shell") npm install vueperslides --save-dev
  p Then import the 2 components and use it:
  precode(language="js" label="Javascript").
    import { VueperSlides, VueperSlide } from 'vueperslides'
    ...

    export default {
      components: {
        VueperSlides,
        VueperSlide
      },
      template: ...,
      data: () => ({
        ...
      }),
      ...
    }

  h3 Via #[span.code &lt;script&gt;] tag
  p Include the VueperSlides script in your document #[span.code &lt;head&gt;] as follows:
  precode(language="html" label="HTML").
    &lt;head&gt;
      ...
      &lt;script src="https://unpkg.com/vue/dist/vue.min.js"&gt;&lt;/script&gt;
      &lt;script src="https://unpkg.com/vueperslides/dist/vueperslides.min.js"&gt;&lt;/script&gt;
    &lt;/head&gt;

  h2
    a(href="#how-to-use") How to use
    a(name="how-to-use")
  p.
    Once included in your project, use as follows.#[br]
    Check the #[a(href="#examples") examples] & #[a(href="#vueper-slides--api") API] sections to know more.
  precode(language="html-vue" label="HTML Vue Template").
    &lt;vueper-slides&gt;
      &lt;vueper-slide v-for="(slide, i) in slides" :key="i" :title="slide.title" :content="slide.content"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;

  precode(language="js" label="Javascript").
    data: () => ({
      slides: [
        {
          title: 'Slide #1',
          content: 'Slide content.'
        },
        ...
      ]
    })
  p.highlight.info If you don't need a #[span.code v-for] loop, you don't need to place your slides data in your VueJs component's data.

  h2
    a(href="#examples") Examples of Use
    a(name="examples")

  h3
    a(href="#ex--simplest-ever") Simplest Ever
    a(name="ex--simplest-ever")
  vueper-slides.ex1
    vueper-slide(v-for="i in 5" :key="i" :title="i.toString()")
  precode(language="html-vue" label="HTML Vue Template").
    &lt;vueper-slides&gt;
      &lt;vueper-slide v-for="i in 5" :key="i" :title="i.toString()"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;

  h3
    a(href="#ex--basic") Basic with Autoplay
    a(name="ex--basic")
  p
    | This example uses autoplay, slide titles & contents & an infinite mode (by default).#[br]
    em The autoplay circles between all the slides and goes back to the begining after the last slide.
  vueper-slides.ex2(autoplay)
    v-icon(slot="pausedIcon" large color="white") pause_circle_outline
    vueper-slide(v-for="(slide, i) in slides" :key="slide.id" :title="slide.title" :content="slide.content" :style="'background-color: ' + colors[i % 4]")
  precode(language="html-vue" label="HTML Vue Template").
    &lt;vueper-slides autoplay&gt;
      &lt;v-icon slot="pausedIcon" large color="white"&gt;pause_circle_outline&lt;/v-icon&gt;
      &lt;vueper-slide v-for="(slide, i) in slides"
        :key="slide.id"
        :title="slide.title"
        :content="slide.content"
        :style="'background-color: ' + colors[i % 4]"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;
  precode(language="js" label="Javascript").
    import { VueperSlides, VueperSlide } from 'vueperslides'

    export default {
      components: {
        VueperSlides,
        VueperSlide
      },
      template: ...,
      data: () => ({
        slides: [
          {
            id: 'slide-1',
            title: 'Slide <b style="font-size: 1.3em;color: yellow">#1</b>',
            content: 'Slide title can be HTML.<br>And so does the slide content, <span style="font-size: 1.2em;color: yellow">why not?</span>'
          },
          ...
        ]
      }),
      ...
    }

  h3
    a(href="#ex--arrows-and-bullets") Arrows & bullets
    a(name="ex--arrows-and-bullets")
  p.
    This example uses custom arrows and positions the bullets outside of the slideshow.#[br]
    The bullets are showing slide indexes which is disabled by default.#[br]
    You can also disable arrows and/or bullets. E.g. #[code :arrows="false"], #[code :bullets="false"]
  vueper-slides.ex--arrows-and-bullets(:infinite="false" :bullets-outside="true")
    v-icon(slot="arrowLeft" color="white" x-large) undo
    v-icon(slot="arrowRight" color="white" x-large) redo
    vueper-slide(v-for="(slide, i) in slides" :key="slide.id" :title="slide.title" :content="slide.content" :style="'background-color: ' + colors[(i + 1) % 4]")
  precode(language="html-vue" label="HTML Vue Template").
    &lt;vueper-slides :infinite="false" :bullets-outside="true"&gt;
      &lt;v-icon slot="arrowLeft" color="white" large&gt;arrow_left&lt;/v-icon&gt;
      &lt;v-icon slot="arrowRight" color="white" large&gt;arrow_right&lt;/v-icon&gt;
      &lt;vueper-slide
        v-for="(slide, i) in slides"
        :key="slide.id"
        :title="slide.title"
        :content="slide.content"
        :style="'background-color: ' + colors[(i + 1) % 4]"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;
  precode(language="css" label="CSS").
    .vueperslides__bullet {
      background-color: rgba(0, 0, 0, 0.3);
      border: none;
      box-shadow: none;
      transition: 0.3s;
      width: 16px;
      height: 16px;
    }

    .vueperslides__bullet--active {
      background-color: #ff5252;
    }

    .vueperslides__bullet span {
      display: block;
      color: #fff;
      font-size: 10px;
      opacity: 0.8;
    }

  h3
    a(href="#ex--images-and-fading") Images & Fading
    a(name="ex--images-and-fading")
  p.
    This example uses #[b images] and #[b fading] as the slide transition.#[br]
    The #[b dragging] ability to change slide is #[b disabled].#[br]
    The current slide title & content are shown #[b outside] of the slider.
    #[br]Of course you can position it with a bit of CSS.
  vueper-slides(fade :slide-content-outside="true" slide-content-outside-class="max-widthed" :touchable="false" :slide-ratio="0.3")
    vueper-slide(v-for="(slide, i) in slides2" :key="i" :image="slide.image" :title="'# ' + slide.title" :content="slide.content")
  precode(language="html-vue" label="HTML Vue Template").
    &lt;vueper-slides fade :slide-content-outside="true" slide-content-outside-class="max-widthed" :touchable="false" :slide-ratio="0.3"&gt;
      &lt;vueper-slide
        v-for="(slide, i) in slides2"
        :key="i"
        :image="'images/' + slide.image"
        :title="'# ' + slide.title"
        :content="slide.content"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;

  h3
    a(href="#ex--events") Events
    a(name="ex--events")
  p.
    This example demonstrates how to use the vueper slides provided events and how to style the current slide.#[br]
    The events box bellow will log all the events (and the given params) triggered while using the slideshow.#[br]
    You can change slides to see new events.
  vueper-slides.ex--events(@before-init="logEvents" @ready="logEvents" @before-slide="logEvents" @slide="logEvents" :slide-ratio="0.2")
    vueper-slide(v-for="i in 6" :key="i" :title="i.toString()" :style="'background-color: ' + ['#ff5252', '#42b983'][i % 2]")
  pre.precode(data-label="Event box" style="min-height: 120px")
    | listening...
    p(v-html="events")
  precode(language="html-vue" label="HTML Vue Template").
    &lt;vueper-slides
      @before-init="logEvents"
      @ready="logEvents"
      @before-slide="logEvents"
      @slide="logEvents"
      :slide-ratio="0.2"&gt;
      &lt;vueper-slide
        v-for="i in 6"
        :key="i"
        :title="i.toString()"
        :content="slide.content"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;
  precode(language="css" label="CSS").
    .vueperslides__slide--active:before {
      content: 'This slide is active!';
      position: absolute;
      top: -18px;
      right: -18px;
      padding: 4px 25px;
      background: orange;
      color: #fff;
      font-size: 10px;
      transform: translateX(30%) rotate(45deg);
      transform-origin: 0 0;
      box-shadow: 0 0 9px rgba(0, 0, 0, 0.2);
    }

  h3
    a(href="#ex--add-remove-slides--disable") Add / remove slides & disable slideshow
    a(name="ex--add-remove-slides--disable")
  p
    | This example illustrates how to add or remove slides on the fly from a running VueperSlides instance.#[br]
    | You can also completely freeze the slideshow and unfreeze when you want to.#[br]
    v-btn(color="primary" @click="appendSlide" small)
      v-icon add
      | &nbsp; Add Slide
    v-btn(color="primary" @click="removeSlide" small)
      v-icon remove
      | &nbsp; Remove Slide
    v-btn(color="secondary" @click="toggleSlideshow" small)
      v-icon {{ slideshowDisabled ? 'check_circle' : 'highlight_off'}}
      | &nbsp; {{ slideshowDisabled ? 'Enable' : 'Disable' }} Slideshow
  p.highlight.info Note that the slideshow disables controls if you have only 1 slide or none.

  vueper-slides(:slide-ratio="0.2" :infinite="false" disableArrowsOnEdges :disable="slideshowDisabled")
    vueper-slide(v-for="(slide, i) in slides3" :key="i" :title="slide.title" :content="slide.content" :style="'background-color: ' + ['#ff5252', '#42b983'][i % 2]")
  precode(language="html-vue" label="HTML Vue Template").
    &lt;v-btn color="primary" @click="appendSlide" small&gt;
      &lt;v-icon&gt;add&lt;/v-icon&gt; Add Slide
    &lt;/v-btn&gt;
    &lt;v-btn color="primary" @click="removeSlide" small&gt;
      &lt;v-icon&gt;remove&lt;/v-icon&gt; Remove Slide
    &lt;/v-btn&gt;
    &lt;v-btn color="secondary" @click="toggleSlideshow" small&gt;
      &lt;v-icon&gt; {{ slideshowDisabled ? 'check_circle' : 'highlight_off'}}&lt;/v-icon&gt; {{ slideshowDisabled ? 'Enable' : 'Disable' }} Slideshow
    &lt;/v-btn&gt;

    &lt;vueper-slides
      :slide-ratio="0.2"
      :infinite="false"
      disableArrowsOnEdges
      :disable="slideshowDisabled"&gt;
      &lt;vueper-slide
        v-for="(slide, i) in slides3"
        :key="i"
        :title="slide.title"
        :content="slide.content"
        :style="'background-color: ' + ['#ff5252', '#42b983'][i % 2]"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;
  precode(language="js" label="Javascript").
    // In your Vue component.

    data: () => ({
      slides: [
        {
          title: 'Slide 1',
          content: 'Slide 1 content.'
        },
        {
          title: 'Slide 2',
          content: 'Slide 2 content.'
        }
      ]
    }),
    methods: {
      appendSlide () {
        this.slides.push({
          title: `Programmagically appended slide ${this.slides.length + 1}`,
          content: `Programmagically appended slide ${this.slides.length + 1} content.`
        })
      },
      removeSlide () {
        this.slides.pop()
      },
      toggleSlideshow () {
        this.slideshowDisabled = !this.slideshowDisabled
      }
    }

  h3
    a(href="#ex--center-mode") Center mode slideshow
    a(name="ex--center-mode")
  p This example demonstrates how to use the vueper slides in a center mode.#[br]
  vueper-slides.ex--center-mode
    vueper-slide(v-for="i in 6" :key="i" :title="i.toString()" :style="'background-color: ' + ['#ff5252', '#42b983'][i % 2]")
  precode(language="html-vue" label="HTML Vue Template").
    &lt;vueper-slides&gt;
      &lt;vueper-slide
        v-for="i in 6"
        :key="i"
        :title="i.toString()"
        :style="'background-color: ' + ['#ff5252', '#42b983'][i % 2]"&gt;&lt;/vueper-slide&gt;
    &lt;/vueper-slides&gt;
  precode(language="css" label="CSS").
    .ex--center-mode {
      width: 600px;
      max-width: 100%;
      margin: auto;
    }

  h2
    a(href="#vueper-slides--api") #[span.code &lt;vueper-slides&gt;] API
    a(name="vueper-slides--api")
  p.
    This is the main tag for the slideshow.#[br]
    You can set different options directly through html attributes.#[br]
    You can also override the default arrows and `paused` indicator if you want.

  h3
    a(href="#vueper-slides--settings") Settings
    a(name="vueper-slides--settings")
  p Here is the list of all the parameters you can define on a #[span.code &lt;vueper-slides&gt;] tag.
  precode(language="js").
    initSlide:                [Number],         default: 1
    slideRatio:               [Number],         default: 1/3
    arrows:                   [Boolean],        default: true
    disableArrowsOnEdges:     [Boolean],        default: false
    bullets:                  [Boolean],        default: true
    bulletsOutside:           [Boolean],        default: false
    fade:                     [Boolean],        default: false
    slideContentOutside:      [Boolean],        default: false
    slideContentOutsideClass: [String],         default: ""
    autoplay:                 [Boolean],        default: false
    speed:                    [Number, String], default: 4000
    pauseOnHover:             [Boolean],        default: true
    infinite:                 [Boolean],        default: true
    touchable:                [Boolean],        default: true
    disable:                  [Boolean],        default: false

  ul.max-widthed.settings-list
    li
      | #[code initSlide], #[strong Type:] #[span.code [Number]], #[strong Default:] #[span.code 1]
      p Init the slideshow with a specific slide as the active slide.

    li
      | #[code slideRatio], #[strong Type:] #[span.code [Number]], #[strong Default:] #[span.code 1/3]
      p.
        Sets the slideshow ratio so it will naturally stay ratio-ed on different browser width.#[br]
        See the #[a(href="#ex--events") Events] example.
      p.highlight.info Setting the ratio avoids heavier javascript width and height calculations on resize.
      p.highlight.success.
        Vueper Slides will soon support settings per breakpoint to let you define a
        different ratio according to the screen width for example. Until then you can have your
        own breakpoints in CSS overriding the slides ratio.

    li
      | #[code arrows], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code true]
      p.
        Disable or enable the navigation arrows.#[br]
        You can also override the arrows by providing them in the html content of the
        #[span.code &lt;vueper-slides&gt;].#[br]
        See the #[a(href="#ex--arrows-and-bullets") Arrows & bullets] example.

    li
      | #[code disableArrowsOnEdges], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code false]
      p Disable the left or right arrow when respectively, no previous or no next slides are available.
      | Check the #[a(href="#ex--add-remove-slides--disable") Add / remove slides & disable slideshow] example.
      p.highlight.info.
        Setting #[span.code disableArrowsOnEdges] to #[span.code true] will also prevent infinite sliding
        and dragging behavior beyond limits.

    li
      | #[code bullets], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code true]
      p Disable or enable the slides index.

    li
      | #[code bulletsOutside], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code false]
      p.
        If bullets is set to #[span.code true], place the slides index inside or outside the slideshow track.#[br]
        See this setting in action in the #[a(href="#ex--arrows-and-bullets") Arrows & bullets] example.

    li
      | #[code fade], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code false]
      p.
        Sets the transition type to fade when changing slide.#[br]
        By default the slideshow slides when changing slide (and so #[span.code fade] is set to #[span.code false]).#[br]
        See this setting in action in the #[a(href="#ex--images-and-fading") Images & Fading] example.
    li
      | #[code slideContentOutside], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code false]
      p.
        Display the current slide title & content outside the slide.#[br]
        You can position and style it with CSS.#[br]
        See this setting in action in the #[a(href="#ex--images-and-fading") Images & Fading] example.

    li
      | #[code slideContentOutsideClass], #[strong Type:] #[span.code [String]], #[strong Default:] #[span.code ""]
      p.
        With this option you can have a specific CSS class to style your slide contents
        when it's outside the active slide.

    li
      | #[code autoplay], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code false]
      p.
        Plays a slideshow automatically. Changing slide after a defined amount
        of time (set in #[span.code speed]).#[br]
        See this setting in action in the #[a(href="#ex--basic") Basic with Autoplay] example.

    li
      | #[code speed], #[strong Type:] #[span.code [Number, String]], #[strong Default:] #[span.code 4000]
      p.
        Defines an amount of time in milliseconds before the autoplaying slideshow
        changes slide automatically.

      p.highlight.info.
        If #[span.code pauseOnHover] is set to #[span.code true] the autoplay stops while hovering then resets
        to the defined #[span.code speed] when you stop hovering.

    li
      | #[code pauseOnHover], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code true]
      p.
        If #[span.code autoplay] is on, setting #[span.code pauseOnHover]  stops the autoplay while hovering
        then resets to the defined #[span.code speed] when you stop hovering.#[br]
        See this setting in action in the #[a(href="#ex--basic") Basic with Autoplay] example.

    li
      | #[code infinite], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code true]
      p.
        When set to #[span.code true], the slideshow acts like a carousel.#[br]
        Going to the next slide or previous slide when respectively on last slide
        or first slide, will seemlessly take the other end's slide and continue from
        that slide position but not breaking the transition direction.#[br]
        See this setting in action in the #[a(href="#ex--simplest-ever") Simplest Ever] example.

      p.highlight.
        #[strong How it works:] when creating the slideshow or adding / removing slides, the first
        and last slides are cloned at each opposite end of the slideshow. When clicking an
        arrow or dragging beyond the first or last slide, the clone will appear then it will
        snap back to the same real slide at the other end of slideshow without you noticing.

      p.highlight.info.
        Infinite sliding is only possible with the sliding transition,
        as a fading slideshow does not need such trick.

    li
      | #[code touchable], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code true]
      p.
        Whether the slideshow should allow slide dragging to change slide or not.#[br]
        If set to #[span.code true], dragging will be possible on both touchable device or desktop with mouse.#[br]
        See this setting in action in the #[a(href="#ex--simplest-ever") Simplest Ever] example.

      p.highlight.info.
        The threshold to change slides is the half of the slideshow track.#[br]
        Start dragging from either end of the slide and as soon as you pass the half of
        the slideshow you can release the dragging to finish the slide change.

      p.highlight.success.
        In a future version of Vueper Slides, you will be able to define the threshold in
        the settings. For example you could set a 30 pixel threshold to count as valid slide change.

    li
      | #[code disable], #[strong Type:] #[span.code [Boolean]], #[strong Default:] #[span.code false]
      p.
        Disable or enable the whole slideshow. All the slides will remain as is and the
        slideshow freezes on the current slide. No autoplay and no possible action.

  h3
    a(href="#events") Events
    a(name="events")
  p Here is the list of all the available events. To see them in action you can check the #[a(href="#ex--events") Events example].
  ul.max-widthed
    li
      h4
        code before-init
      p.
        Triggered in the first place before the initialization of the slideshow.#[br]
        No parameter available.
    li
      h4
        code ready
      p.
        Triggered right after the initialization of the slideshow is complete.#[br]
        No parameter available.
    li
      h4
        code before-slide
      p.
        Triggered on slide change, just before the effective change.#[br]
        This event is emitted with:
      ul
        li a #[span.code currentSlide] object containing the slide index, title & content of the current slide.
        li a #[span.code nextSlide] object containing the slide index, title & content of the next slide.
    li
      h4
        code slide
      p.
        Triggered on slide change, just after the effective change.#[br]
        This event is emitted with:
      ul
        li a #[span.code currentSlide] object containing the slide index, title & content of the new current slide.

  h2
    a(href="#vueper-slide--api") &lt;vueper-slide&gt; API
    a(name="vueper-slide--api")
  h3
    a(href="#vueper-slide--settings") Settings
    a(name="vueper-slide--settings")
  p This settings can be applied to every #[span.code &lt;vueper-slide&gt;] tag.
  precode(language="js").
    image:   [String], default: ''
    title:   [String], default: ''
    content: [String], default: ''
